from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

class ModelManager:
    # Existing __init__, encode_acronym_jep, prepare_training_data, train_model, etc.

    def select_and_train_best_model(self, data: list[dict]):
        models = {
            "DecisionTree": DecisionTreeClassifier(),
            "RandomForest": RandomForestClassifier(n_estimators=50)
        }

        best_model, best_score, best_name = None, -1, ""
        X, y = self.prepare_training_data(data)

        for name, model in models.items():
            scores = cross_val_score(model, X, y, cv=5, scoring='f1_weighted')
            avg_score = scores.mean()
            print(f"[Model Selection] {name}: F1={avg_score:.4f}")
            if avg_score > best_score:
                best_model, best_score, best_name = model, avg_score, name

        self.model = best_model
        self.train_model(data)  # Fit final model on all data
        self.save_metadata(best_score, self.label_encoder.classes_, model_name=best_name)

        print(f"[ModelManager] Best model: {best_name} with F1={best_score:.4f}")
        return best_name, best_score

    def save_metadata(self, f1_score, label_classes, model_path="jaris_model.joblib", model_name=""):
        metadata = {
            "f1_score": f1_score,
            "labels": list(label_classes),
            "timestamp": datetime.now().isoformat(),
            "model_path": model_path,
            "model_name": model_name
        }
        with open("jaris_model_metadata.json", "w") as f:
            json.dump(metadata, f, indent=4)
if __name__ == "__main__":
    acronym_data = [
        {"acronym": "JARIS", "output": "TIME"},
        {"acronym": "RAV", "output": "RESET"},
        {"acronym": "ZEL", "output": "SURVIVAL"},
        {"acronym": "MIR", "output": "CONTROL"},
    ]

    manager = ModelManager(model=None, retrain_f1_threshold=0.8)

    # Automatically select and train the best model
    model_name, f1_score = manager.select_and_train_best_model(acronym_data)

    # Predict
    test_input = "JARIS"
    prediction = manager.predict(test_input)
    print(f"Prediction for {test_input}: {prediction}")

    # Visualize encodings
    visualize_encoded(manager, [item["acronym"] for item in acronym_data])
