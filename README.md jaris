# JARIS
import logging
from sklearn.model_selection import cross_val_score
from sklearn.metrics import f1_score
import joblib  # For saving and loading models

class ModelManager:
    def __init__(self, model, retrain_f1_threshold):
        """
        Initializes the ModelManager with a machine learning model and a retraining threshold.

        :param model: A machine learning model (e.g., RandomForest, SVM, etc.)
        :param retrain_f1_threshold: F1 score threshold below which retraining is triggered
        """
        self.model = model
        self.retrain_f1_threshold = retrain_f1_threshold
        # Set up logging
        logging.basicConfig(level=logging.INFO)

    def train_model(self, X_train, y_train, X_test, y_test):
        """
        Trains the model, performs cross-validation, evaluates it, 
        and triggers retraining if necessary.

        :param X_train: Training feature set
        :param y_train: Training labels
        :param X_test: Test feature set
        :param y_test: Test labels
        """
        try:
            # Train the model on the training data
            self.model.fit(X_train, y_train)
            logging.info("Model training completed.")
            
            # Perform cross-validation to evaluate model performance
            cv_scores = cross_val_score(self.model, X_train, y_train, cv=5, scoring='f1_weighted')
            logging.info(f"Cross-Validation F1 Scores: {cv_scores}")
            logging.info(f"Mean Cross-Validation F1 Score: {cv_scores.mean():.4f}")
            
            # Evaluate the model on the test set
            y_pred = self.model.predict(X_test)
            f1 = f1_score(y_test, y_pred, average='weighted')
            logging.info(f"Test F1 Score: {f1:.4f}")

            # Trigger retraining if F1 score is below the threshold
            if f1 < self.retrain_f1_threshold:
                logging.warning("Retraining triggered due to low F1 score.")
                self.model.fit(X_train, y_train)

        except Exception as e:
            logging.error(f"Error during model training or evaluation: {e}")
            raise

    def check_retrain(self, X_test, y_test):
        """
        Checks whether retraining is needed based on the F1 score.

        :param X_test: Test feature set
        :param y_test: Test labels
        :return: True if retraining is needed, False otherwise
        """
        try:
            if self.model:
                y_pred = self.model.predict(X_test)
                f1 = f1_score(y_test, y_pred, average='weighted')
                return f1 < self.retrain_f1_threshold
            return False
        except Exception as e:
            logging.error(f"Error during retrain check: {e}")
            return False

    def save_model(self, filename):
        """
        Saves the trained model to a file.

        :param filename: Path to the file where the model will be saved
        """
        try:
            joblib.dump(self.model, filename)
            logging.info(f"Model saved to {filename}.")
        except Exception as e:
            logging.error(f"Error saving the model: {e}")
            raise

    def load_model(self, filename):
        """
        Loads a saved model from a file.

        :param filename: Path to the file where the model is saved
        """
        try:
            self.model = joblib.load(filename)
            logging.info(f"Model loaded from {filename}.")
        except Exception as e:
            logging.error(f"Error loading the model: {e}")
            raise
